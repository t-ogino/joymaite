class User < ActiveRecord::Base
  #------------------------------------------------------------------------------------------------
  #  ＶＡＬＩＤＡＴＥ
  #------------------------------------------------------------------------------------------------
  #validates_format_of :name, with: /^[^ -~｡-ﾟ]*$/ , message: "は全角文字を入力してください", multiline: true
  #validates_inclusion_of :sex, in: "1".."2", message: "は男(1)または女(2)を入力してください"
  #------------------------------------------------------------------------------------------------
  # === メソッド概要
  # ＣＳＶの内容を取り込み、ＵＳＥＲテーブルに付け込みます
  # === 引数
  #  file_path:  CSVのファイルパス
  # === 戻り値
  #  なし
  #------------------------------------------------------------------------------------------------
  def self.import(file_path)
    begin
      # エラーメッセージ
      # CSV読み込み
      File::open(file_path, "rb") do |f|
        f.each do |rec|
            csv_rec = CsvFile2.new(rec)      # CSVレコード定義
            User.create(
               name: csv_rec.name,
               sex:  csv_rec.sex,
               birth: csv_rec.birth,
               email: csv_rec.email
            )
        end
      end
    # エラー処理
    rescue => e
       p e.message
       raise e
    end
  end
  #------------------------------------------------------------------------------------------------
  # === メソッド概要
  # ＵＳＥＲテーブルを読み込み、ＣＳＶとして出力します
  # === 引数
  #  file_path:  CSVのファイルパス
  # === 戻り値
  #  なし
  #------------------------------------------------------------------------------------------------
  def self.csv_put(file_path)
    # 出力ファイルオープン
    out_file = File.open(file_path, 'w+b')
    # 見出し行出力
    header =["名前",
           "性別",
           "生年月日（和暦）",
           "メールアドレス"]
    out_file.print(header.join(",") + "\r\n")
    # ＤＢ読み込み
    users = User.all
    users.each do |user|
      data = [user.name,
              SpecTest52.get_sex_name(user.sex),
              SpecTest52.get_wareki_date(user.birth),
              user.email]
      # 明細行出力
      out_file.print(data.join(",") + "\r\n")
    end
    # 出力ファイルクローズ
    out_file.close
  end
=begin
  #------------------------------------------------------------------------------------------------
  # === メソッド概要
  # 名前が全角文字のみであることをチェックします
  # === 引数
  #  name:  年月日（文字列）
  # === 戻り値
  #  エラーメッセージ
  #------------------------------------------------------------------------------------------------
  def self.validate_name(name)
    unless name =~ /^[^ -~｡-ﾟ]*$/
      return "名前は全角文字を入力してください"
    end
  end
  #------------------------------------------------------------------------------------------------
  # === メソッド概要
  # 性別が１または２であることをチェックします
  # === 引数
  #  sex:  性別
  # === 戻り値
  #  エラーメッセージ
  #------------------------------------------------------------------------------------------------
  def self.validate_sex(sex)
    if sex == "1" or sex == "2"
    else
      return "性別は男(1)または女(2)を入力してください"
    end
  end
  #------------------------------------------------------------------------------------------------
  # === メソッド概要
  # 生年月日が実在日であることをチェックします
  # === 引数
  #  sex:  性別
  # === 戻り値
  #  エラーメッセージ
  #------------------------------------------------------------------------------------------------
  def self.validate_birth(birth)
    if SpecTest52.get_edit_birth(birth).blank?
      return "生年月日が存在しない日付です"
    end
  end
  #------------------------------------------------------------------------------------------------
  # === メソッド概要
  # メールアドレスの形式チェックを行います
  # === 引数
  #  sex:  性別
  # === 戻り値
  #  エラーメッセージ
  #------------------------------------------------------------------------------------------------
  def self.validate_email(email)
    unless email =~ /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
      return "メールアドレスの形式が誤っています。"
    end
  end
=end
  #------------------------------------------------------------------------------------------------
  # === メソッド概要
  # ８桁も文字列の日付をＤａｔｅ型に変換します
  # === 引数
  #  str:  年月日（文字列）
  # === 戻り値
  #  年月日（Ｄａｔｅ型）
  #------------------------------------------------------------------------------------------------
  private
  def self.convert_to_date(str)
    Date.new(str[0,4].to_i, str[4,2].to_i, str[6,2].to_i)
  end
end
